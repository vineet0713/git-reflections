git log - shows all of the commits, starting from most recent
git diff [id1] [id2] - shows all differences between commits identified by id1 and id2

'git config --global color.ui auto' command makes git diff color-keyed (red and green)

git checkout [id] - resetting all files to their state during the specified commit id

HEAD - this is what Git calls the current commit that you're working on

"ls -a" - shows the hidden files in current directory
(Git repos always have a hidden file ".git")

git init - running this command in your current directory will make it a Git repo!

Working Directory - the files on your hard drive
Staging Area - Git's intermediate area between your working directory and Git repository
Repository - the Git repo!

git add [file] - adds the file to the staging area

If you accidently added a file to the staging area:
git reset [file] - removes the file from the staging area but keeps it in working directory

Git Setup:
git config --global user.name "Your Name"
git config --global user.email you@example.com

git diff - with no arguments, git diff shows the differences between working directory and staging area

git diff --staged - shows the differences between staging area and repository (useful before committing!)

git reset --hard - discards any changes in both the working directory AND staging area
(NOTE: this command is irreversible!
So run 'git diff' and 'git diff --staged' so you're sure about the changes you want to discard)

git branch - with no arguments, git branch shows the current branches

git branch [branchname] - creates a new branch with 'branchname'
git checkout [branchname] - ensures that any change will affect only the specified branchname
Equivalent command of above 2 commands: 'git branch -b [branchname]'

git show [id] - shows the changes that the commit (specified by id) introduced relative to its parent!

git branch -d [branchname] - deletes the branchname (only the label, not the commits associated with the branch)
